NAME
    Map::Tube::Fake - Interface to the Fake Metro Map.

SYNOPSIS
     use Map::Tube::Fake;

     my $obj = Map::Tube::Fake->new;
     my $routes_ar = $obj->get_all_routes($from, $to);
     my $lines_ar = $obj->get_lines;
     my $station = $obj->get_node_by_id($station_id);
     my $station = $obj->get_node_by_name($station_name);
     my $route = $obj->get_shortest_route($from, $to);
     my $stations_ar = $obj->get_stations($line);
     my $metro_name = $obj->name;
     my $xml_file = $obj->xml;

DESCRIPTION
    It currently provides functionality to find the shortest route between
    the two given nodes.

    For more information about Fake Map, click here
    <https://en.wikipedia.org/wiki/Fake_Metro>.

METHODS
  "new"
     my $obj = Map::Tube::Fake->new;

    Constructor.

    Returns instance of object.

  "get_all_routes" [EXPERIMENTAL]
     my $routes_ar = $obj->get_all_routes($from, $to);

    Get all routes from station to station.

    Returns reference to array with Map::Tube::Route objects.

  "get_lines"
     my $lines_ar = $obj->get_lines;

    Get lines in metro map.

    Returns reference to array with Map::Tube::Line objects.

  "get_node_by_id"
     my $station = $obj->get_node_by_id($station_id);

    Get station node by id.

    Returns Map::Tube::Node object.

  "get_node_by_name"
     my $station = $obj->get_node_by_name($station_name);

    Get station node by name.

    Returns Map::Tube::Node object.

  "get_shortest_route"
     my $route = $obj->get_shortest_route($from, $to);

    Get shortest route between $from and $to node names. Node names in $from
    and $to are case insensitive.

    Returns Map::Tube::Route object.

  "get_stations"
     my $stations_ar = $obj->get_stations($line);

    Get list of stations for concrete metro line.

    Returns reference to array with Map::Tube::Node objects.

  "name"
     my $metro_name = $obj->name;

    Get metro name.

    Returns string with metro name.

  "xml"
     my $xml_file = $obj->xml;

    Get XML specification of Fake metro.

    Returns string with XML.

EXAMPLE1
     use strict;
     use warnings;

     use Encode qw(decode_utf8 encode_utf8);
     use Map::Tube::Fake;

     # Object.
     my $obj = Map::Tube::Fake->new;

     # Get route.
     my $route = $obj->get_shortest_route('Station #2-3', 'Station #3-2');

     # Print out type.
     print "Route: ".encode_utf8($route)."\n";

     # Output:
     # Route: Station #2-3 (Line #2, Street), Station #3-2 (Line #3, Street)

EXAMPLE2
     use strict;
     use warnings;

     use Map::Tube::Fake;

     # Object.
     my $obj = Map::Tube::Fake->new;

     # Get XML file.
     my $xml_file = $obj->xml;

     # Print out XML file.
     print "XML file: $xml_file\n";

     # Output like:
     # XML file: .*/fake-map.xml

EXAMPLE3
     use strict;
     use warnings;

     use Map::Tube::GraphViz;
     use Map::Tube::GraphViz::Utils qw(node_color_without_label);
     use Map::Tube::Fake;

     # Object.
     my $obj = Map::Tube::Fake->new;

     # GraphViz object.
     my $g = Map::Tube::GraphViz->new(
             'callback_node' => \&node_color_without_label,
             'driver' => 'neato',
             'tube' => $obj,
     );

     # Get graph to file.
     $g->graph('Fake.png');

     # Print file.
     system "ls -l Fake.png";

     # Output like:
     # -rw-r--r-- 1 skim skim 27046 Dec 25 18:23 Fake.png

EXAMPLE4
     use strict;
     use warnings;

     use Encode qw(encode_utf8);
     use Map::Tube::Fake;

     # Object.
     my $obj = Map::Tube::Fake->new;

     # Get lines.
     my $lines_ar = $obj->get_lines;

     # Print out.
     map { print encode_utf8($_->name)."\n"; } sort @{$lines_ar};

     # Output:
     # GPS line
     # Line #1
     # Line #2
     # Line #3

EXAMPLE5
     use strict;
     use warnings;

     use Encode qw(encode_utf8);
     use Map::Tube::Fake;

     # Arguments.
     if (@ARGV < 1) {
             print STDERR "Usage: $0 line\n";
             exit 1;
     }
     my $line = $ARGV[0];

     # Object.
     my $obj = Map::Tube::Fake->new;

     # Get stations for line.
     my $stations_ar = $obj->get_stations($line);

     # Print out.
     map { print encode_utf8($_->name)."\n"; } @{$stations_ar};

     # Output:
     # Usage: __PROG__ line

     # Output with 'foo' argument.
     # Map::Tube::get_stations(): ERROR: Invalid Line Name [foo]. (status: 105) file __PROG__ on line __LINE__

     # Output with 'Line #1' argument.
     # Station #1-1
     # Station #1-2
     # Station #1-3

DEPENDENCIES
    File::Share, Map::Tube, Moo, namespace::clean.

SEE ALSO
    Map::Tube
        Core library as Role (Moo) to process map data.

    Task::Map::Tube
        Install the Map::Tube modules.

    Task::Map::Tube::Metro
        Install the Map::Tube concrete metro modules.

REPOSITORY
    <https://github.com/michal-josef-spacek/Map-Tube-Fake>

AUTHOR
    Michal Josef Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    © 2015-2023 Michal Josef Špaček

    Artistic License

    BSD 2-Clause License

VERSION
    0.01

